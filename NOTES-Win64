
1. ABI Calling Convention
=========================

1.1. Argument Passing
---------------------

 rax callee(  rcx,  rdx,   r8,   r9, stack[0], stack[1], ... )
xmm0 callee( xmm0, xmm1, xmm2, xmm3, stack[0], stack[1], ... )



uint64_t callee( uint64_t a, uint64_t b, uint64_t c, uint64_t d,
                 uint64_t e, uint64_t f )
{
  uint64_t xx = a * b;
  uint64_t yy = a + b;
  uint64_t zz = otherfunc(xx,yy);

  return xx + yy + zz;
}


Register State When Calling 'callee'
------------------------------------

  rcx: a
  rdx: b
   r8: c
   r9: d


Stack Layout When Calling 'callee'
----------------------------------

This is what it looks in System V ABI:

                  +-----------+  high address
rbp + 24          |     f     |
                  +-----------+
rbp + 16          |     e     |
                  +-----------+
rbp + 8           | ret addr  |
                  +-----------+
rbp               | saved rbp |
                  +-----------+
rbp - 8           |    xx     |
                  +-----------+
rbp - 16          |    yy     |
                  +-----------+
rbp - 24          |    zz     |
                  +-----------+  low address

Since the stack is fixed size now, you don't really need to save
the base pointer.  The previous rbp can be derived from rsp.

                  +-----------+  high address
rbp + 16          |     f     |
                  +-----------+
rbp + 8           |     e     |
                  +-----------+
rbp               | ret addr  |
                  +-----------+
rbp - 8           |    xx     |
                  +-----------+
rbp - 16          |    yy     |
                  +-----------+
rbp - 24          |    zz     |
                  +-----------+  low address


1.2. Register Parameter Area
----------------------------
 
The caller reserves stack space for all the arguments passed through registers.
This stack space is referred to the Register Parameter Area.

Each argument is 8 bytes, so 32 bytes total is reserved by the caller before
the call instruction and reclaimed after the call instruction.

The register parameter area makes the stack structure easy to determine/walk.

                  +-----------+  high address
rbp + 48          |     f     |
                  +-----------+
rbp + 40          |     e     |
                  +-----------+  \
rbp + 32          |    p3     |  |
                  +-----------+  |
rbp + 24          |    p2     |  | Register Parameter Area
                  +-----------+  |
rbp + 16          |    p1     |  |
                  +-----------+  |
rbp + 8           |    p0     |  |
                  +-----------+  /
rbp               | ret addr  |
                  +-----------+
rbp - 8           |    xx     |
                  +-----------+
rbp - 16          |    yy     |
                  +-----------+
rbp - 24          |    zz     |
                  +-----------+  low address


[parameters]
[activation frame]
[locals]



+-----------+
|           |
+-----------+





